Para criar um signal, importe;

from PySide6.QtCore import Signal

Na classe que irá querer emitir o sinal, crie um atributo


class Display(QLineEdit):
    eqRequested = Signal()  # Receberá alguma coisa

E se for ser emitido algum str, int, e por aí vai, colocará assim=

class Display(QLineEdit):
    eqRequested = Signal(str, int)  # Receberá alguma coisa

Agora quando acontecer a coisa de que quer que emita o sinal, por exemplo, a 
tecla enter foi pressionada, apenas emita o sinal

    def keyPressEvent(self, event: QKeyEvent) -> None:
        key = event.key()
        KEYS = Qt.Key
        isEnter = key in [KEYS.Key_Enter, KEYS.Key_Return]
        if isEnter:
            self.eqRequested.emit()
            return event.ignore()

Dessa forma, a tecla não fará nada no display em si, mas irá emitir um signal.

Strip remove os espaços da ponta.

    def keyPressEvent(self, event: QKeyEvent) -> None:
        text = event.text().strip()

    if isEmpty(text):
        return event.ignore()

    print("Texto", text)

Está checando se a tecla tem um texto como "abcdefg... 123456..." e por aí vai,
teclas sem texto seria, "esc, tab, caps lock, ctrl, alt, shift... etc" e está sendo
checado isto.


    inputPressed = Signal(str)

isso foi feito, para dizer que input recebe string.

    inputPressed = Signal(str, int)

agora ele recebe string e int.


args e kwargs poderia ser usado nisto:

    def vouApagarVocê(self, *args):
        print("Penis recebido por 'vou comer você' em", type(self).__name__)

afinal, vários metódos estarão usando isso, mas nem todos possuem argumentos,
então, se for passado *args, se os métodos passarem argumentos, o args pegará
os tais argumentos.